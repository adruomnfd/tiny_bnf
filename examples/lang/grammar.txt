Sentence >= IP-MAT .?
Sentence >= CP-QUE .?
Sentence >= NP | ADJP | ADVP | PP

# =====CLAUSES=====
# =================
IP >= NP-SBJ verb~Ln ADVP? NP-PRD2 
IP >= NP-SBJ verb~La ADVP? ADJP-PRD2 
IP >= NP-SBJ ADVP? verb~I 
IP >= NP-SBJ verb~Tn NP-OB1 
IP >= NP-SBJ verb~Cn.a NP-OB1 ADJP-PRD 
IP >= NP-SBJ verb~Dn.n NP-OB2 NP-OB1 
IP >= NP-SBJ verb~cat_Ve IP-PPL-CAT.Ve 
IP >= NP-SBJ verb~cat_Vg IP-PPL-CAT.Vg

# finite verb inversion
IP.inv >= VBF~Ln NEG? NP-SBJ NP-PRD2   | MD NEG? NP-SBJ VB~Ln NP-PRD2
IP.inv >= VBF~La NEG? NP-SBJ ADJP-PRD2 | MD NEG? NP-SBJ VB~La ADJP-PRD2
IP.inv >= AUX NP-SBJ ADVP? VB~I 
IP.inv >= AUX NP-SBJ VB~Tn NP-OB1 
IP.inv >= AUX NP-SBJ VB~Cn.a NP-OB1 ADJP-PRD 
IP.inv >= AUX NP-SBJ VB~Dn.n NP-OB2 NP-OB1 
IP.inv >= VBF~cat_Ve NEG? NP-SBJ IP-PPL-CAT.Ve | MD NEG? NP-SBJ VB~cat_Ve IP-PPL-CAT.Ve 
IP.inv >= VBF~cat_Vg NEG? NP-SBJ IP-PPL-CAT.Vg | MD NEG? NP-SBJ VB~cat_Vg IP-PPL-CAT.Vg

IP-MAT    >= IP[verb -> V, NP-SBJ -> NP-SBJ]
IP-PPL.Vg >= IP[verb -> VAG, NP-SBJ -> NP-SBJ?]
IP-PPL.Ve >= IP[verb -> VVN, NP-SBJ -> NP-SBJ?]
IP-INF.Vt >= IP[verb -> TO VB, NP-SBJ -> NP-SBJ?]
IP-INF.Vi >= IP[verb -> VB, NP-SBJ -> NP-SBJ?]

# passive voice
IP-PPL.Ve >= VVN~Tn
IP-PPL.Ve >= VVN~Cn.a ADJP-PRD
IP-PPL.Ve >= VVN~Dn.n NP-OB2

# interrogative
CP-QUE >= IP-SUB.que 
IP-SUB.que >= IP.inv&

IP-REL >= IP[verb -> V, NP-SBJ -> NP-SBJ.rel]
IP-REL >= IP[verb -> V, NP-SBJ -> PP.rel NP-SBJ]
IP-REL >= IP[verb -> V, NP-SBJ -> RADV NP-SBJ]
IP-REL >= NP-PRD2.rel NP-SBJ V~Ln
IP-REL >= NP-OB1.rel NP-SBJ V~Tn

# present tense verb combination
V~Ln     == VBF~Ln NEG? | MD NEG? VB~Ln
V~La     == VBF~La NEG? | MD NEG? VB~La
V~I      == VBF~I | AUX VB~I
V~Tn     == VBF~Tn | AUX VB~Tn
V~Cn.a   == VBF~Cn.a | AUX VB~Cn.n
V~Dn.n   == VBF~Dn.n | AUX VB~Dn.n
V~cat_Ve == VBF~cat_Ve | AUX VB~cat_Ve
V~cat_Vg == VBF~cat_Vg | AUX VB~cat_Vg

# tags for non-finite clause
IP-PPL-CAT.Vg >= IP-PPL.Vg&
IP-PPL-CAT.Ve >= IP-PPL.Ve&
IP-PPL        == IP-PPL.Ve | IP-PPL.Vg
IP-PPL.single >= VVN~Tn | VAG~I

# that clause
IP-SUB.c >= C IP-MAT&
IP-SUB   >= C? IP-MAT&

CP-THT.c >= IP-SUB.c
CP-THT   >= IP-SUB

# =====CLAUSE CONSTITUENTS=====
# =============================
NP-SBJ    >= NP&
NP-OB1    >= NP&
NP-OB2    >= NP&
NP-PRD2   >= NP&
NP-PRD    >= NP&
ADJP-PRD2 >= ADJP&
ADJP-PRD  >= ADJP&

NP-SBJ.rel  >= NP.rel&
NP-OB1.rel  >= NP.rel&
NP-OB2.rel  >= NP.rel&
NP-PRD2.rel >= NP.rel&

VBF~Ln     == VBP~Ln | VBD~Ln
VBF~La     == VBP~La | VBD~La
VBF~I      == VBP~I | VBD~I
VBF~Tn     == VBP~Tn | VBD~Tn
VBF~Cn.a   == VBP~Cn.a | VBD~Cn.a
VBF~Dn.n   == VBP~Dn.n | VBD~Dn.n
VBF~cat_Ve == VBP~cat_Ve | VBD~cat_Ve
VBF~cat_Vg == VBP~cat_Vg | VBD~cat_Vg

MD  >= can | could | may | might | will | would | shall | should
EX  >= there
NEG >= not | n't |  't
TO  >= to
CQ  >= whether

DOP >= do | does
DOD >= did
DOF == DOP | DOD

AUX == (MD | DOF) NEG?

# =====PHRASES=====
# =================
NP >= NP.prehead NP.head NP.posthead
NP >= (D.indefinite | Q.indefinite) ADVP? ADJP? NP.posthead
NP >= Q.pr PP
NP >= D.demonstrative
NP.rel >= RPRO | NP.prehead.rel NP.head NP.posthead

ADJP >= ADJP.prehead ADJP.head ADJP.posthead | AML.adj

ADVP >= ADVP? ADVP.head& | AML.adv
ADVP.single >= ADV

PP   >= PP.head& NP | PML&
PP.rel >= PP.head& NP.rel


# =====PHRASE CONSTITUENTS=====
# =============================

# ===NP===
NP.head == PRO | PNX | NPR | NPRS | N | NS | NML
 
#             [about]  [all | five]  [such  a  | my]        [four]  [great]  [sleeping]      [internet] 
NP.prehead == ADVP?    (Q   | NUM)?  (ADJP? D? | NP-GENV?)  NUM?    ADJP*    IP-PPL.single?  NP.nominal*

NP.prehead.rel == ADVP?    (Q   | NUM)?  (ADJP? RD? | NP-GENV.rel?)  NUM?    ADJP*    IP-PPL.single?  NP.nominal*
           
NP.posthead == PP* (IP-PPL | IP-INF.Vt | CP-THT.c)? IP-REL?

NP.nominal == NPR | NPRS | N | NS | NML

NP-GENV >= NP& GENM | PRO.gen
NP-GENV.rel >= RPRO.gen
GENM >= 's

NML >= NML.group& | NML.conj
NML.group >= NP.head PP
NML.group >= ADJP NP.head
NML.group >= NML.conj
NML.group >= (NUM | NP.nominal) - NP.head

NML.conj >= NEG? ADVP? NP CONJP.n.c ADVP? | NP (, CONJP.n)+ , CONJP.n.c
CONJP.n >= NP
CONJP.n.c >= CONJ (, ADVP ,)? ADVP? NP

# ===ADJP===
ADJP.head == ADJ | ADJR | ADJS
ADJP.prehead == ADVP* | NP? | PP?
ADJP.posthead == ADVP? | PP? | IP-INF.Vt | CP-THT.c

# FIXME: add parentheses at (                )             
AML.adj >= NEG? ADVP.single? ADJP CONJP.adj.c ADVP.single? | ADJP (, CONJP.adj)+, CONJP.adj.c
CONJP.adj >= ADJP
CONJP.adj.c >= CONJ (, ADVP, )? ADVP.single? (ADJP | PP)

# ===ADVP===
ADVP.head == ADV | ADVR | ADVS

AML.adv >= NEG? ADVP.single? ADVP CONJP.adv.c | ADVP (, CONJP.adv)+, CONJP.adv.c   
CONJP.adv >= ADVP
CONJP.adv.c >= CONJ (, ADVP, )? ADVP.single? ADVP

# ===PP===
PP.head >= P

PML >= NEG? ADVP.single? PP CONJP.pp.c ADVP.single? | PP (, CONJP.pp)+, CONJP.adv.c
CONJP.pp >= PP
CONJP.pp.c >= CONJ (, ADVP, )? ADVP.single? PP

CONJ >= and | or | but | yet
C >= that
P-ROLE >= P&
P-CONN >= P&

NUM >= digit+&